{"ast":null,"code":"var _jsxFileName = \"C:\\\\LearningList\\\\src\\\\TodoContext\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useLocalStorage } from \"./UseLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/React.createContext();\n\nfunction TodoProvider(props) {\n  _s();\n\n  //buscamos nuestros todos\n  const {\n    //con los : renombro\n    item: todos,\n    saveItem: saveTodos,\n    loading,\n    error\n  } = useLocalStorage('TODOS_V1', []);\n  const [searchValue, setSearchValue] = React.useState('');\n  const [openModal, setOpenModal] = React.useState(false); //filtramos los arrays completados \n\n  const completedTodos = todos.filter(todo => !!todo.completed).length; //mi cantidad de todos\n\n  const totalTodos = todos.length; //filtro de todos para cuando hago una busqueda\n\n  let searchedTodos = [];\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  } //esta funcion recibe un array y nos ayuda a persistir info\n\n\n  const addTodo = text => {\n    const newTodos = [...todos];\n    newTodos.push({\n      completed: false,\n      text\n    });\n    saveTodos(newTodos);\n  };\n\n  const completeTodo = text => {\n    //buscar los todos que coinciden el texto anterior con el actual\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = true;\n    saveTodos(newTodos);\n  };\n\n  const deleteTodo = text => {\n    //buscar los todos que coinciden el texto anterior con el actual\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos);\n  };\n\n  return (\n    /*#__PURE__*/\n    //lo usamos para envolver todo la aplicacion\n    _jsxDEV(TodoContext.Provider, {\n      value: {\n        loading,\n        error,\n        totalTodos,\n        completedTodos,\n        searchValue,\n        setSearchValue,\n        searchedTodos,\n        deleteTodo,\n        addTodo,\n        completeTodo,\n        openModal,\n        setOpenModal\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }, this)\n  );\n}\n\n_s(TodoProvider, \"gnktLyQUM65leZPVmh0EmeDCwbs=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = TodoProvider;\nexport { TodoContext, TodoProvider };\n/* \r\n\r\n//lo usamos cuando necesitemos algo de context\r\n<TodoContext.Consumer></TodoContext.Consumer> */\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["C:/LearningList/src/TodoContext/index.js"],"names":["React","useLocalStorage","TodoContext","createContext","TodoProvider","props","item","todos","saveItem","saveTodos","loading","error","searchValue","setSearchValue","useState","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","addTodo","newTodos","push","completeTodo","todoIndex","findIndex","deleteTodo","splice","children"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useLocalStorage } from \"./UseLocalStorage\";\r\n\r\nconst TodoContext= React.createContext();\r\n\r\nfunction  TodoProvider(props){\r\n    \r\n  //buscamos nuestros todos\r\n  const {\r\n    //con los : renombro\r\n    item:todos,\r\n    saveItem: saveTodos,\r\n    loading,\r\n    error,\r\n  } = useLocalStorage('TODOS_V1', []);\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n  const [openModal, setOpenModal] = React.useState(false);\r\n//filtramos los arrays completados \r\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\r\n  //mi cantidad de todos\r\n  const totalTodos = todos.length;\r\n//filtro de todos para cuando hago una busqueda\r\n  let searchedTodos = [];\r\n\r\n  if (!searchValue.length >= 1) {\r\n    searchedTodos = todos;\r\n  } else {\r\n    searchedTodos = todos.filter(todo => {\r\n      const todoText = todo.text.toLowerCase();\r\n      const searchText = searchValue.toLowerCase();\r\n      return todoText.includes(searchText);\r\n    });\r\n  }\r\n//esta funcion recibe un array y nos ayuda a persistir info\r\nconst addTodo=(text)=> {\r\n   const newTodos=[...todos];\r\n    newTodos.push({\r\n    completed:false,  \r\n    text,\r\n});\r\n saveTodos(newTodos);\r\n  };\r\n\r\n  const completeTodo=(text)=> {\r\n    //buscar los todos que coinciden el texto anterior con el actual\r\n    const todoIndex =todos.findIndex(todo => todo.text === text);\r\n    const newTodos=[...todos];\r\n    newTodos[todoIndex].completed=true;\r\n    saveTodos(newTodos);\r\n  };\r\n  const deleteTodo=(text)=> {\r\n    //buscar los todos que coinciden el texto anterior con el actual\r\n    const todoIndex =todos.findIndex(todo => todo.text === text);\r\n    const newTodos=[...todos];\r\n    newTodos.splice(todoIndex, 1);\r\n    saveTodos(newTodos);\r\n  };\r\n \r\n    return (\r\n        \r\n    //lo usamos para envolver todo la aplicacion\r\n     <TodoContext.Provider value={{\r\n            loading,\r\n            error,\r\n            totalTodos,\r\n            completedTodos,\r\n            searchValue,\r\n              setSearchValue,\r\n              searchedTodos,\r\n              deleteTodo,\r\n              addTodo,\r\n              completeTodo,\r\n              openModal,\r\n              setOpenModal,\r\n     }}> \r\n      {props.children}\r\n     </TodoContext.Provider>   \r\n       \r\n   \r\n    );\r\n}\r\n\r\nexport {TodoContext, TodoProvider};\r\n\r\n/* \r\n\r\n//lo usamos cuando necesitemos algo de context\r\n<TodoContext.Consumer></TodoContext.Consumer> */"]},"metadata":{},"sourceType":"module"}