{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\n\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  const [item, setItem] = React.useState(initialValue);\n  React.useEffect(() => {\n    setTimeout(() => {\n      try {\n        const localStorageItem = localStorage.getItem(itemName); //esto le enviare a usestate\n\n        let parsedItem; //si no tenemos nada en local storage \n\n        if (!localStorageItem) {\n          //set item añadirá estos al almacén, o actualizará el valor si la clave ya existe.\n          //Json stritify lo guarda y lo convierte a ese formato\n          localStorage.setItem(itemName, JSON.stringify(initialValue)); //al crear solo tengo un array vacio\n\n          parsedItem = initialValue;\n        } else {\n          //si tenemos info lo mando a mi json para que lo guarde \n          parsedItem = JSON.parse(localStorageItem);\n        }\n\n        setItem(parsedItem);\n        setLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    }, 1000);\n  });\n\n  const saveItem = newItem => {\n    try {\n      //le enviamos nuestro nuevo array de todos\n      const stringifiedItem = JSON.stringify(newItem); //se actualiza la info del nuevo item \n\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n\n_s(useLocalStorage, \"sd/jOzXoKWa10AnxNJGXHNbuvYQ=\");\n\nexport { useLocalStorage };","map":{"version":3,"sources":["C:/LearningList/src/TodoContext/UseLocalStorage.js"],"names":["React","useLocalStorage","itemName","initialValue","error","setError","useState","loading","setLoading","item","setItem","useEffect","setTimeout","localStorageItem","localStorage","getItem","parsedItem","JSON","stringify","parse","saveItem","newItem","stringifiedItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,SAASC,eAAT,CAA0BC,QAA1B,EAAoCC,YAApC,EAAiD;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAe,KAAf,CAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,KAAK,CAACM,QAAN,CAAe,IAAf,CAA9B;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACM,QAAN,CAAeH,YAAf,CAAxB;AAEAH,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAK;AACnBC,IAAAA,UAAU,CAAC,MAAK;AACb,UAAG;AACA,cAAMC,gBAAgB,GAAEC,YAAY,CAACC,OAAb,CAAqBb,QAArB,CAAxB,CADA,CAEM;;AACA,YAAIc,UAAJ,CAHN,CAIM;;AACI,YAAI,CAACH,gBAAL,EAAsB;AAChB;AACA;AACJC,UAAAA,YAAY,CAACJ,OAAb,CAAqBR,QAArB,EAA+Be,IAAI,CAACC,SAAL,CAAef,YAAf,CAA/B,EAHoB,CAIpB;;AACAa,UAAAA,UAAU,GAACb,YAAX;AACD,SAND,MAMK;AACH;AACAa,UAAAA,UAAU,GAAGC,IAAI,CAACE,KAAL,CAAWN,gBAAX,CAAb;AACD;;AACDH,QAAAA,OAAO,CAACM,UAAD,CAAP;AACAR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACZ,OAjBD,CAkBA,OAAMJ,KAAN,EAAY;AACPC,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACJ;AAEC,KAvBK,EAuBH,IAvBG,CAAV;AAwBF,GAzBA;;AA6BA,QAAMgB,QAAQ,GAAGC,OAAD,IAAa;AAC7B,QAAG;AACJ;AACG,YAAMC,eAAe,GAAGL,IAAI,CAACC,SAAL,CAAeG,OAAf,CAAxB,CAFC,CAGD;;AACAP,MAAAA,YAAY,CAACJ,OAAb,CAAqBR,QAArB,EAA+BoB,eAA/B;AACAZ,MAAAA,OAAO,CAACW,OAAD,CAAP;AACD,KAND,CAOA,OAAMjB,KAAN,EAAY;AACVC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD;AACF,GAXC;;AAaF,SAAM;AACJK,IAAAA,IADI;AAEJW,IAAAA,QAFI;AAGJb,IAAAA,OAHI;AAIJH,IAAAA;AAJI,GAAN;AAMC;;GArDMH,e;;AAsDP,SAAUA,eAAV","sourcesContent":["import React from \"react\";\r\nfunction useLocalStorage (itemName, initialValue){ \r\n    const [error, setError] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [item, setItem] = React.useState(initialValue);\r\n  \r\n    React.useEffect(()=> {\r\n      setTimeout(()=> {\r\n         try{\r\n            const localStorageItem =localStorage.getItem(itemName);\r\n                  //esto le enviare a usestate\r\n                  let parsedItem;\r\n                  //si no tenemos nada en local storage \r\n                      if (!localStorageItem){\r\n                            //set item añadirá estos al almacén, o actualizará el valor si la clave ya existe.\r\n                            //Json stritify lo guarda y lo convierte a ese formato\r\n                        localStorage.setItem(itemName, JSON.stringify(initialValue))\r\n                        //al crear solo tengo un array vacio\r\n                        parsedItem=initialValue;\r\n                      }else{\r\n                        //si tenemos info lo mando a mi json para que lo guarde \r\n                        parsedItem = JSON.parse(localStorageItem);\r\n                      }  \r\n                      setItem(parsedItem); \r\n                      setLoading(false);\r\n         }\r\n         catch(error){\r\n              setError(error);\r\n         }\r\n       \r\n          }, 1000 );\r\n   }); \r\n    \r\n     \r\n  \r\n    const saveItem =(newItem) => { \r\n    try{\r\n   //le enviamos nuestro nuevo array de todos\r\n      const stringifiedItem = JSON.stringify(newItem);\r\n      //se actualiza la info del nuevo item \r\n      localStorage.setItem(itemName, stringifiedItem );\r\n      setItem(newItem);\r\n    }\r\n    catch(error){\r\n      setError(error);\r\n    }\r\n  };\r\n  \r\n  return{ \r\n    item, \r\n    saveItem,\r\n    loading,\r\n    error,\r\n  };\r\n  }\r\n  export  { useLocalStorage };"]},"metadata":{},"sourceType":"module"}